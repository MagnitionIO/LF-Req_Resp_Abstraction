target Cpp

public preamble {=
    #include "RequestResponse/request_response.hh"
=}

reactor ContextManager<Req, Resp, Ctx> {
    input request_in: std::pair<Req, Ctx>
    output request_out: Req

    input response_in: Resp
    output response_out: std::pair<Resp, Ctx>

    state context_buffer: {= std::map<unsigned long, Ctx> =}

    reaction (request_in) -> request_out {=
        const auto& req = request_in.get()->first;
        const auto& ctx = request_in.get()->second;
        context_buffer[req.uid()] = ctx;
        request_out.set(req);
    =}

    reaction (response_in) -> response_out {=
        const auto& resp = *response_in.get();
        const auto& ctx = context_buffer[resp.uid()];
        response_out.set(std::make_pair(resp, ctx));
    =}
}

bundle ReqRspPort<In, Out> {
    input in: In
    output out: Out
}

reactor AddService<In, Out> {
    port Port: ReqRspPort<In, Out>

    logical action request_queue: Request<In>

    reaction(Port.in) -> request_queue {=
        auto delay = std::chrono::milliseconds(rand() % 400 + 100);
        request_queue.schedule(Port.in.get(), delay);
    =}

    reaction(request_queue) -> Port.out {=
        auto req = request_queue.get();
        int sum = req->data().first + req->data().second;
        Port.out.set(req->make_response(sum));
    =}
}

reactor Client<In, Out, Ctx> {
    timer t(0, 100ms)
    state counter: int(0)

    port Port:ReqRspPort<In, Out>
    
    add_cm = new ContextManager<Out, In, Ctx>()

    reaction(t) -> add_cm.request_in {=
        auto req = Request(std::make_pair(counter, 42));
        int c = counter; // This is a weird corner case in C++ where the clojure below 
        // cannot capture counter by value. Copying it to a local variable helps... 
        auto callback = [c](int sum) {
            reactor::log::Info() << "Result: " << c << " + 42 = " << sum;
        };
        add_cm.request_in.set(std::make_pair(req, callback));
        reactor::log::Info() << "Client asks what " << counter << " + 42 is";
        counter++;
    =}

    reaction(add_cm.response_out) {=
        auto const& resp = add_cm.response_out.get()->first;
        auto const& callback = add_cm.response_out.get()->second;
        callback(resp.data());
    =}

    add_cm.request_out -> Port.out
    Port.in -> add_cm.response_in
}

main reactor {
    adder = new AddService<{=std::pair<int, int>=}, int> ()
    client = new Client<{=std::pair<int, int>=}, int, {=std::function<void(int)>=}>()

    client.Port <> adder.Port
}