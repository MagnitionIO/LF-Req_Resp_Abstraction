target C {
    keepalive: true,
    cmake-include: [
        "../lib/lib.cmake"
    ],
    files: [
        "../lib/convertor.h",
        "../lib/convertor.c",
        "../lib/types.h"
    ]
    // fast: true
}

preamble {=
#include <stdio.h>
#include "convertor.h"
=}

reactor Wire<Input, Output> (latency:int(0)){
    input in:Input;
    output out:Output;
    logical action delayed_trigger(0):Input;

    reaction(in) -> delayed_trigger {=
        lf_schedule_copy(delayed_trigger, self->latency, &in->value, 1);
    =}

    reaction(delayed_trigger) -> out {=
        if (is_same_type(delayed_trigger->value, out->value))
        {
            // lf_set(out, delayed_trigger->value);
        }
        else
        {
            auto_t tmp = DO_CONVERT(Input, Output, delayed_trigger->value);
            lf_set(out, tmp);
        }
    =}
}

reactor A {
    output Aout:A_t;
    logical action post;

    timer t(0, 1sec);
    reaction(t) -> post {=
        lf_schedule(post, 2);
    =}

    reaction(post) -> Aout {=
        A_t a;
        a.id = rand();
        a.height = rand();
        a.age = rand();
        sprintf(a.name, "%d%x%x %p", rand(), rand(), rand(), &a);
        lf_set(Aout, a);
    =}
}

reactor B {
    input Bin:B_t;

    reaction(Bin) {=
        printf("got id:%d height:%f\n", Bin->value.id, Bin->value.height);
    =}
}

main reactor {
    a = new A();
    w = new Wire<A_t, B_t>(latency=500);
    // w2 = new Wire<long, double>(latency=500);
    b = new B();

    a.Aout -> w.in;
    w.out -> b.Bin;
}
