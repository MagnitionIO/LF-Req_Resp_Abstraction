/** Generated by Magnition Bulk Config Generator
 * All Changes to this file will be overwritten
 *
 * Copyright (C) Magnition.io - All Rights Reserved
 *
 * This source code is protected under international copyright law.  All rights
 * reserved and protected by the copyright holders.
 * This file is confidential and only available to authorized individuals with the
 * permission of the copyright holders.  If you encounter this file and do not have
 * permission, please contact the copyright holders and delete this file.
 *
 * Author: Khubaib Umer <khubaib@magnition.io>
 */


// Template Path is: /usr/local/share/magnition/lf_reactors/storage_pool_controller/src

target C {
    keepalive: true,
    workers: 1,
//    logging:debug,
    fast:true,
};

import load_balancer from  "loadbalancer_linked_latest.lf"
preamble {=

=}

reactor storage_pool_ctrl<T1, T2, T3> (name:string("storage_pool"), read_lb_name:string("read_lb"), write_lb_name:string("write_lb"), bank_index:int(0), n_inputs:int(1), n_outputs:int(1), log_level:int({=LOG_DEBUG_LEVEL=})) {
    input[n_inputs] stg_in_request:T1;
    output[n_outputs] stg_out_request:T1;
    input[n_outputs] stg_in_response:T3;
    output[n_inputs] stg_out_response:T3;

    input[n_inputs] write_stg_in_request:T2;
    output[n_outputs] write_stg_out_request:T2;
    input[n_outputs] write_stg_in_response:T2;
    output[n_inputs] write_stg_out_response:T2;

    input[n_inputs] allocation_request:uint64_t;
    output[n_inputs] allocation_success:uint64_t;
    output[n_inputs] allocation_failure:uint64_t;

    output[n_outputs] e_allocation_request:uint64_t;
    input[n_outputs] e_allocation_success:uint64_t;
    input[n_outputs] e_allocation_failure:uint64_t;

    logical action schedule_allocation;

    state storage_ctx:spc_ctx_handler_t*(0);

    read_refs_lb = new load_balancer<T1, T3> (name = read_lb_name, selection = {=LB_SELECT_GIVEN=}, n_inputs = n_inputs, n_outputs = n_outputs, def_output = 0, log_level = log_level);
    write_refs_lb = new load_balancer<T2, T2> (name = write_lb_name, selection = {=LB_SELECT_GIVEN=}, n_inputs = n_inputs, n_outputs = n_outputs, def_output = 0, log_level = log_level);

    reaction (startup) {=
    =}

    reaction (schedule_allocation) -> e_allocation_request {=
    =}

    reaction (allocation_request) -> schedule_allocation {=
    =}

    reaction (e_allocation_success) -> allocation_success, schedule_allocation {=
    =}

    reaction (e_allocation_failure) -> schedule_allocation, allocation_failure {=
    =}
    
    stg_in_request -> read_refs_lb.in_request;
    read_refs_lb.out_request -> stg_out_request;
    stg_in_response -> read_refs_lb.in_response;
    read_refs_lb.out_response -> stg_out_response;

    write_stg_in_request -> write_refs_lb.in_request;
    write_refs_lb.out_request -> write_stg_out_request;
    write_stg_in_response -> write_refs_lb.in_response;
    write_refs_lb.out_response -> write_stg_out_response;
}