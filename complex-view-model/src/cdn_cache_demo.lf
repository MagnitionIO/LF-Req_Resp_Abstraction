/** Generated by Magnition Bulk Config Generator
 * All Changes to this file will be overwritten
 *
 * Copyright (C) Magnition.io - All Rights Reserved
 *
 * This source code is protected under international copyright law.  All rights
 * reserved and protected by the copyright holders.
 * This file is confidential and only available to authorized individuals with the
 * permission of the copyright holders.  If you encounter this file and do not have
 * permission, please contact the copyright holders and delete this file.
 *
 * Author: Khubaib Umer <khubaib@magnition.io>
 */

target C {
    keepalive: true,
    workers: 1,
//    logging:debug,
    fast:true,
};

import ssd_storage from  "ssd_storage_linked.lf"
import dram_storage from  "plain_dram_storage.lf"
import trace_replayer from  "trace_replayer_linked.lf"
import lookup from  "lookup_linked_ptr.lf"
import eviction from  "eviction_linked.lf"
import load_balancer from  "loadbalancer_linked_latest.lf"
import allocator from  "allocator_linked.lf"
import storage_pool_ctrl from  "storage_pool_controller.lf"
preamble {=
=}

preamble {=
=}

reactor cache_config_engine (name:string("cache_config_engine"), max_iter:int(10), n_traces:int(1), log_level:int({=LOG_DEBUG_LEVEL=})) {
    output start_trigger:int;

    input [n_traces]trace_end:uint32_t;
    output simulation_end:uint32_t;

    state trace_end_count:int(0);

    reaction (startup) ->start_trigger {=
        lf_set (start_trigger, self->max_iter);
    =}

    reaction (trace_end) -> simulation_end {=
        for (int i = 0; i < self->n_traces; ++i) {
            if (/* some logic */true) {
                lf_set (simulation_end, 0);
            }
        }
    =}
}

reactor zero_cost_storage (name:string("zero_cost_storage"), bank_index:int(0), n_ports:int(1), log_level:int({=LOG_DEBUG_LEVEL=})) {
    input [n_ports] stg_request:cdn_cache_request_t;
    output [n_ports] stg_response:cdn_cache_response_t;

    input [n_ports] write_stg_request:p_cdn_cache_entry_t;
    output [n_ports] write_stg_response:p_cdn_cache_entry_t;

    reaction (startup) {=
    // log info
    =}

    reaction (stg_request) -> stg_response {=
    =}

    reaction (write_stg_request) -> write_stg_response {=
    =}
}

reactor const_delay_storage (name:string("storage"), bank_index:int(0), delay:time(100 ms), log_level:int({=LOG_DEBUG_LEVEL=})) {
    input stg_request:cdn_cache_request_t;
    output stg_response:cdn_cache_response_t;

    input write_stg_request:p_cdn_cache_entry_t;
    output write_stg_response:p_cdn_cache_entry_t;

    logical action fetch_delay(0):cdn_cache_response_t;

    reaction (startup) {=
        // log info
    =}

    reaction (fetch_delay) -> stg_response {=
    =}

    reaction (stg_request) -> fetch_delay {=
    =}

    reaction (write_stg_request) -> write_stg_response {=
    =}
}

reactor controller<Type> (name:string("cdn_cache_controller"), store_on_miss:bool(true), log_level:int({=LOG_DEBUG_LEVEL=})) {
    output io_response:cdn_cache_response_t;

    input lu_hit_rsp:cdn_response_tuple_t
    output eviction_update:p_cdn_cache_entry_t;
    output hit_fetch_request:cdn_cache_request_t;
    input hit_fetch_response:cdn_cache_response_t;

    input miss_fetch_response:cdn_cache_response_t;

    output insert_entry:p_cdn_cache_entry_t;

    output alloc_req:cdn_cache_request_t;
    input alloc_success:p_cdn_cache_entry_t;

    input end_trigger:uint32_t;

    logical action sch_response(0):cdn_cache_response_t;
    logical action sch_eviction(0):cdn_cache_request_t;
    logical action sch_insertions(0):cdn_cache_entry_t*;

    state io_refs:uint64_t(0);
    state io_misses:uint64_t(0);

    state io_refs_bytes:uint64_t(0);
    state io_misses_bytes:uint64_t(0);
    state dummy:Type;

    reaction (lu_hit_rsp) -> hit_fetch_request, eviction_update {=
    =}
    reaction (sch_response) -> io_response {=
    =}

    reaction (miss_fetch_response) -> alloc_req, sch_response {=
    =}

    reaction (sch_insertions) -> insert_entry {=
    =}

    reaction (hit_fetch_response) -> sch_response {=
    =}

    reaction (alloc_success) -> sch_insertions {=
    =}

    reaction (end_trigger) {=
    =}
}

reactor cdn_cache (bank_index:int(0), name:string("cdn_cache"), store_on_miss:bool(true), evict_methods:{=usr_def_eviction_methods_t *=}(0), eviction_type:int({= LRU =}), n_ports:int(1), cache_size:uint64_t(4096), page_size:uint64_t(4096), log_level:int({=LOG_DEBUG_LEVEL=})) {
    input io_request:cdn_cache_request_t;
    output io_resp:cdn_cache_response_t;

    output hit_fetch_request:cdn_cache_request_t;
    input hit_fetch_response:cdn_cache_response_t;

    output miss_fetch_request:cdn_cache_request_t;
    input miss_fetch_response:cdn_cache_response_t;

    output miss_store_request:p_cdn_cache_entry_t;
    input miss_store_response:p_cdn_cache_entry_t;

    output allocation_request:uint64_t;
    input allocation_success:uint64_t;
    input allocation_failure:uint64_t;

    input end_trigger:uint32_t;

    logical action sch_response(0):cdn_cache_response_t;
    logical action sch_eviction(0):cdn_cache_request_t;
    logical action sch_insertions(0):cdn_cache_entry_t*;

    state free_space:uint64_t(0);

    CacheCtrl = new controller<int> (name = name, store_on_miss = store_on_miss, log_level = log_level)
    LookUp = new lookup<cdn_cache_request_t, p_cdn_cache_entry_t, cdn_response_tuple_t> (name = name, n_ports = 1, log_level = log_level);
    Eviction = new eviction<p_cdn_cache_entry_t, cdn_cache_request_t, cdn_response_tuple_t> (name = name, evict_methods = evict_methods, n_ports = 1, eviction_type = eviction_type, n_samples = 5, log_level = log_level)
    Allocator = new allocator<cdn_cache_request_t, p_cdn_cache_entry_t, cdn_response_tuple_t> (name = name, log_level = log_level);

    reaction (startup) -> allocation_request {=
    =}

    reaction (allocation_success) -> Allocator.alloc_config {=
    =}

    reaction (allocation_failure) {=
    =}

    reaction (Eviction.evict_failure) {=
    =}

    CacheCtrl.alloc_req -> Allocator.alloc_req;
    Allocator.alloc_rsp -> CacheCtrl.alloc_success;

    Allocator.alloc_failure -> Eviction.evict_req;
    Eviction.evict_rsp -> Allocator.free_req;
    Allocator.free_rsp -> LookUp.del_req;

    io_request -> LookUp.lu_req;
    LookUp.hit_resp -> CacheCtrl.lu_hit_rsp;
    CacheCtrl.hit_fetch_request -> hit_fetch_request;
    hit_fetch_response -> CacheCtrl.hit_fetch_response;
    LookUp.miss_resp -> miss_fetch_request;
    miss_fetch_response -> CacheCtrl.miss_fetch_response;
    CacheCtrl.io_response -> io_resp;
    CacheCtrl.insert_entry -> miss_store_request;
    miss_store_response -> LookUp.ins_req;
    miss_store_response -> Eviction.ins_elem;
    CacheCtrl.eviction_update -> Eviction.update_elem;
    end_trigger -> CacheCtrl.end_trigger;
}

reactor DRAM_Server (bank_index:int(0), name:string ("DRAM_Server"), tier_id:int(0), pop_id:int(0), storage_space:uint64_t(4096), store_on_miss:bool(true), evict_methods:{=usr_def_eviction_methods_t *=}(0), eviction_type:int({= LRU =}), cache_size:uint64_t(4096), page_size:uint64_t(4096), log_level:int({=LOG_DEBUG_LEVEL=})) {
    input end_trigger:uint32_t;
    input io_request:cdn_cache_request_t;
    output io_resp:cdn_cache_response_t;

    output miss_fetch_request:cdn_cache_request_t;
    input miss_fetch_response:cdn_cache_response_t;

    dram_storage_device = new dram_storage<cdn_cache_request_t, p_cdn_cache_entry_t, cdn_cache_response_t>(name = name, free_space = storage_space, n_ports = 1, log_level = log_level);
    cache = new cdn_cache(name = name, store_on_miss = store_on_miss, evict_methods = evict_methods, eviction_type = eviction_type, n_ports = 1, cache_size = cache_size, page_size = page_size, log_level = log_level);

    reaction (startup) {=
        // code
    =}

    reaction (io_request) {=
        // code
    =}

    end_trigger -> cache.end_trigger;
    io_request -> cache.io_request;
    cache.io_resp -> io_resp;

    cache.allocation_request -> dram_storage_device.allocation_request;
    dram_storage_device.allocation_success -> cache.allocation_success;
    dram_storage_device.allocation_failure -> cache.allocation_failure;

    cache.hit_fetch_request -> dram_storage_device.stg_request;
    cache.miss_store_request -> dram_storage_device.write_stg_request;
    dram_storage_device.stg_response -> cache.hit_fetch_response;
    dram_storage_device.write_stg_response -> cache.miss_store_response;
}

reactor SSD_Server (bank_index:int(0), name:string ("SSD_Server"), storage_space:uint64_t(4096), store_on_miss:bool(true), evict_methods:{=usr_def_eviction_methods_t *=}(0), eviction_type:int({= LRU =}), cache_size:uint64_t(4096), page_size:uint64_t(4096), log_level:int({=LOG_DEBUG_LEVEL=})) {
    input end_trigger:uint32_t;
    input io_request:cdn_cache_request_t;
    output io_resp:cdn_cache_response_t;

    output miss_fetch_request:cdn_cache_request_t;
    input miss_fetch_response:cdn_cache_response_t;

    ssd_storage_device = new ssd_storage<cdn_cache_request_t, p_cdn_cache_entry_t, cdn_cache_response_t>(name = name, free_space = storage_space, n_ports = 1, log_level = log_level);
    cache = new cdn_cache(name = name, store_on_miss = store_on_miss, evict_methods = evict_methods, eviction_type = eviction_type, n_ports = 1, cache_size = cache_size, page_size = page_size, log_level = log_level);

    reaction (startup) {=
        // code
    =}

    reaction (io_request) {=
        // code
    =}

    end_trigger -> cache.end_trigger;
    io_request -> cache.io_request;
    cache.io_resp -> io_resp;

    cache.allocation_request -> ssd_storage_device.allocation_request;
    ssd_storage_device.allocation_success -> cache.allocation_success;
    ssd_storage_device.allocation_failure -> cache.allocation_failure;

    cache.hit_fetch_request -> ssd_storage_device.stg_request;
    cache.miss_store_request -> ssd_storage_device.write_stg_request;
    ssd_storage_device.stg_response -> cache.hit_fetch_response;
    ssd_storage_device.write_stg_response -> cache.miss_store_response;
}

reactor PoP (bank_index:int(0), name:string ("POP"), tier_id:int(0), l1_cache_size:uint64_t(4096), l2_cache_size:uint64_t(4096), l1_page_size:uint64_t(4096), l2_page_size:uint64_t(4096), n_L1_servers:int(1), n_L2_servers:int(1), log_level:int({=LOG_DEBUG_LEVEL=})) {
    input end_trigger:uint32_t;

    input io_request:cdn_cache_request_t;
    output io_response:cdn_cache_response_t;

    output miss_fetch_request:cdn_cache_request_t;
    input miss_fetch_response:cdn_cache_response_t;

    l1_storage_devices = new [n_L1_servers] dram_storage<cdn_cache_request_t, p_cdn_cache_entry_t, cdn_cache_response_t>(name = {=cdn_cache_config_tiers_pops_l1_servers_name(${tier_id}, ${bank_index}, bank_index)=}, free_space = 549755813888, n_ports = 1, log_level = log_level);
    l1_caches = new [n_L1_servers] cdn_cache(name = {=cdn_cache_config_tiers_pops_l1_servers_name(${tier_id}, ${bank_index}, bank_index)=}, store_on_miss = true, evict_methods = {=&lru_eviction_methods=}, eviction_type = {=FIFO=}, n_ports = 1, cache_size = l1_cache_size, page_size = l1_page_size, log_level = log_level);

    l2_storage_devices = new [n_L2_servers] dram_storage<cdn_cache_request_t, p_cdn_cache_entry_t, cdn_cache_response_t>(name = {=cdn_cache_config_tiers_pops_l2_servers_name(${tier_id}, ${bank_index}, bank_index)=}, free_space = 549755813888, n_ports = 1, log_level = log_level);
    l2_caches = new [n_L2_servers] cdn_cache(name = {=cdn_cache_config_tiers_pops_l2_servers_name(${tier_id}, ${bank_index}, bank_index)=}, store_on_miss = true, evict_methods = {=&lru_eviction_methods=}, eviction_type = {=FIFO=}, n_ports = 1, cache_size = l2_cache_size, page_size = l2_page_size, log_level = log_level);

    l1_servers_lb = new load_balancer<cdn_cache_request_t, cdn_cache_response_t> (name = {=cdn_cache_config_tiers_pops_l1_server_lb_name(${tier_id}, ${bank_index}, 0)=}, selection_methods = {=&rand_lb_methods=}, selection = {=USR_DEF_SELECTION=}, n_inputs = 1, n_outputs = n_L1_servers, def_output = 0, log_level = log_level);
    l2_servers_lb = new load_balancer<cdn_cache_request_t, cdn_cache_response_t> (name = {=cdn_cache_config_tiers_pops_l2_server_lb_name(${tier_id}, ${bank_index}, 0)=}, selection_methods = {=&url_hash_lb_methods=}, selection = {=USR_DEF_SELECTION=}, n_inputs = n_L1_servers, n_outputs = n_L2_servers, def_output = 0, log_level = log_level);

    server_serializer = new load_balancer<cdn_cache_request_t, cdn_cache_response_t> (name = {=cdn_cache_config_tiers_pops_pop_serializer_name(${tier_id}, ${bank_index}, 0)=}, selection = {=LB_SELECT_GIVEN=}, n_inputs = n_L2_servers, n_outputs = 1, def_output = 0, log_level = log_level);

    reaction (startup) {=
        // code
    =}

    reaction (l1_servers_lb.out_request) {=
        for (int i = 0; i < self->n_L1_servers; ++i) {
            if (l1_servers_lb.out_request[i]->is_present) {
                // code
            }
        }
    =}

    l1_caches.allocation_request -> l1_storage_devices.allocation_request;
    l1_storage_devices.allocation_success -> l1_caches.allocation_success;
    l1_storage_devices.allocation_failure -> l1_caches.allocation_failure;

    l1_caches.hit_fetch_request -> l1_storage_devices.stg_request;
    l1_caches.miss_store_request -> l1_storage_devices.write_stg_request;
    l1_storage_devices.stg_response -> l1_caches.hit_fetch_response;
    l1_storage_devices.write_stg_response -> l1_caches.miss_store_response;

    l2_caches.allocation_request -> l2_storage_devices.allocation_request;
    l2_storage_devices.allocation_success -> l2_caches.allocation_success;
    l2_storage_devices.allocation_failure -> l2_caches.allocation_failure;

    l2_caches.hit_fetch_request -> l2_storage_devices.stg_request;
    l2_caches.miss_store_request -> l2_storage_devices.write_stg_request;
    l2_storage_devices.stg_response -> l2_caches.hit_fetch_response;
    l2_storage_devices.write_stg_response -> l2_caches.miss_store_response;
    
    (end_trigger)+ -> l1_caches.end_trigger;

    io_request -> l1_servers_lb.in_request;
    l1_servers_lb.out_request -> l1_caches.io_request;
    l1_caches.io_resp -> l1_servers_lb.in_response;
    l1_servers_lb.out_response -> io_response;

    (end_trigger)+ -> l2_caches.end_trigger;

    l1_caches.miss_fetch_request -> l2_servers_lb.in_request;
    l2_servers_lb.out_request -> l2_caches.io_request;
    l2_caches.io_resp -> l2_servers_lb.in_response;
    l2_servers_lb.out_response -> l1_caches.miss_fetch_response;


    l2_caches.miss_fetch_request -> server_serializer.in_request;
    server_serializer.out_request -> miss_fetch_request;
    miss_fetch_response -> server_serializer.in_response;
    server_serializer.out_response -> l2_caches.miss_fetch_response;
}

reactor pop_tier (bank_index:int(0), name:string("pop_tier"), n_pops:int(1), pageSize:uint32_t(4096), log_level:int({=LOG_DEBUG_LEVEL=})) {
    input end_trigger:uint32_t;

    input io_request:cdn_cache_request_t;
    output io_response:cdn_cache_response_t;

    output miss_fetch_request:cdn_cache_request_t;
    input miss_fetch_response:cdn_cache_response_t;

    pop_lb = new load_balancer<cdn_cache_request_t, cdn_cache_response_t> (name = {=cdn_cache_config_tiers_pop_lb_name(${bank_index}, 0)=}, selection = {=LB_SELECT_RR=}, n_inputs = 1, n_outputs = n_pops, def_output = 0, log_level = log_level);
    pops = new [n_pops] PoP(name = {=cdn_cache_config_tiers_pops_name(${bank_index}, bank_index)=}, tier_id = bank_index, l1_cache_size = 588936089, l2_cache_size = 588936089, l1_page_size = 4096, l2_page_size = 4096, n_L1_servers = 2, n_L2_servers = 2, log_level = log_level);
    tier_serializer = new load_balancer<cdn_cache_request_t, cdn_cache_response_t> (name = {=cdn_cache_config_tiers_tier_serializer_name(${bank_index}, 0)=}, selection = {=LB_SELECT_RR=}, n_inputs = n_pops, n_outputs = 1, def_output = 0, log_level = log_level);

    reaction (startup) {=
        // code
    =}

    (end_trigger)+ -> pops.end_trigger;

    io_request -> pop_lb.in_request;
    pop_lb.out_request -> pops.io_request;
    pops.io_response -> pop_lb.in_response;
    pop_lb.out_response -> io_response;

    pops.miss_fetch_request -> tier_serializer.in_request;
    tier_serializer.out_request -> miss_fetch_request;
    miss_fetch_response -> tier_serializer.in_response;
    tier_serializer.out_response -> pops.miss_fetch_response;
}

main reactor (max_iter:int(-1), n_tiers:int(1), n_pops:int(2), n_traces:int(1), pageSize:uint32_t(4096), log_level:int({=LOG_DEBUG_LEVEL=})) {
    c_config = new cache_config_engine (max_iter = max_iter, n_traces = n_traces, log_level = log_level);
    trace = new [n_traces] trace_replayer<cdn_cache_request_t, cdn_cache_response_t, vscsi_trace_item_t> (name = {=workload_config_trace_config_name(bank_index)=}, trace_methods = {=&vscsi_parser_methods=}, stats_methods = {=&stats_collection_methods=}, trace_path = "/Users/khubaibumer/trace/", file_name = "w73_vscsi1.vscsitrace", log_level = log_level);
    tier_lb = new load_balancer<cdn_cache_request_t, cdn_cache_response_t> (name = {=cdn_cache_config_tier_lb_name(0)=}, selection = {=LB_SELECT_RR=}, n_inputs = n_traces, n_outputs = n_tiers, def_output = 0, log_level = log_level);
    origin_storage = new const_delay_storage (name = {=origin_config_name(0)=}, delay = 100 ms, log_level = log_level);
    pt = new [n_tiers] pop_tier (name = {=cdn_cache_config_tiers_name(bank_index)=}, n_pops = n_pops, pageSize = pageSize, log_level = log_level);
 
    (c_config.start_trigger)+ -> trace.start_trigger;
    trace.end_trigger -> c_config.trace_end;
    (c_config.simulation_end)+ -> pt.end_trigger;

    trace.out_request -> tier_lb.in_request;
    tier_lb.out_request -> pt.io_request;
    pt.io_response -> tier_lb.in_response;
    tier_lb.out_response -> trace.in_response;

    pt.miss_fetch_request -> origin_storage.stg_request;
    origin_storage.stg_response -> pt.miss_fetch_response;
}