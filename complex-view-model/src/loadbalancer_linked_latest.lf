/** Generated by Magnition Bulk Config Generator
 * All Changes to this file will be overwritten
 *
 * Copyright (C) Magnition.io - All Rights Reserved
 *
 * This source code is protected under international copyright law.  All rights
 * reserved and protected by the copyright holders.
 * This file is confidential and only available to authorized individuals with the
 * permission of the copyright holders.  If you encounter this file and do not have
 * permission, please contact the copyright holders and delete this file.
 *
 * Author: Khubaib Umer <khubaib@magnition.io>
 */


// Template Path is: /usr/local/share/magnition/lf_reactors/load_balancer/src

target C {
    keepalive: true,
    workers: 1,
//    logging:debug,
    fast:true,
};

preamble {=
=}

reactor load_balancer<T1, T2> (bank_index:int(0), name:string("load_balancer"), selection_methods:{=usr_def_loadbalancer_methods_t *=}(0), selection:int(0), n_inputs:int(2), n_outputs:int(1), def_output:int(0), log_level:int(0)) {
    input[n_inputs] in_request:T1;
    output[n_inputs] out_response:T2;

    output[n_outputs] out_request:T1;
    input[n_outputs] in_response:T2;

    logical action send_out_request(0);
    logical action send_out_response(0);

    state lb_ctx:lb_ctx_handler_t*(0);

    reaction (startup) {=
        // code
    =}

    reaction (send_out_request) -> out_request, send_out_request {=
        for (int i = 0; i < out_request_width; ++i) {
            var req = lf_get_pointer(out_request[i]->value);
            lf_set (out_request[i], req);
        }
        if (/*some logic*/true) {
            lf_schedule (send_out_request, 0);
        }
    =}

    reaction (in_request) -> send_out_request {=
        for (int i = 0; i < in_request_width; ++i) {
            if (in_request[i]->is_present) {
                var req = lf_get_pointer(in_request[i]->value);
            }
        }
        lf_schedule (send_out_request, 0);
    =}

    reaction (send_out_response) -> out_response, send_out_response {=
        for (int i = 0; i < out_response_width; ++i) {
            var rsp = lf_get_pointer(out_response[i]->value);
            var out = lf_to_left_type (out_response[i]->value, rsp);
            lf_set (out_response[i], out);
        }
        if (/*logic*/true) {
            lf_schedule (send_out_response, 0);
        }
    =}

    reaction (in_response) -> send_out_response {=
        for (int i = 0; i < in_response_width; ++i) {
            if (in_response[i]->is_present) {
                var rsp = lf_get_pointer(in_response[i]->value);
            }
        }
        lf_schedule (send_out_response, 0);
    =}

    reaction (shutdown) {=

    =}
}