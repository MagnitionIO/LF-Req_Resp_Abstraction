/** Generated by Magnition Bulk Config Generator
 * All Changes to this file will be overwritten
 *
 * Copyright (C) Magnition.io - All Rights Reserved
 *
 * This source code is protected under international copyright law.  All rights
 * reserved and protected by the copyright holders.
 * This file is confidential and only available to authorized individuals with the
 * permission of the copyright holders.  If you encounter this file and do not have
 * permission, please contact the copyright holders and delete this file.
 *
 * Author: Khubaib Umer <khubaib@magnition.io>
 */


// Template Path is: /usr/local/share/magnition/lf_reactors/ssd_storage/src

target C {
    keepalive: true,
    workers: 1,
//    logging:debug,
    fast:true,
};

preamble {=
=}

reactor ssd_storage<T1, T2, T3> (bank_index:int(0), name:string("ssd_storage"), n_ports:int(1), ssd_cfg_path:string("/usr/local/share/libMQSim/ssdconfig.xml"), free_space:uint64_t(4096), log_level:int(0)) {
    input[n_ports] stg_request:T1;
    output[n_ports] stg_response:T3;

    input[n_ports] write_stg_request:T2;
    output[n_ports] write_stg_response:T2;

    output[n_ports] ssd_idle_trigger:int64_t;
    input[n_ports] print_stats:bool;

    input[n_ports] allocation_request:uint64_t;
    output[n_ports] allocation_success:uint64_t;
    output[n_ports] allocation_failure:uint64_t;

    logical action schedule_tick;
    logical action finished_request_crawling;

    state required_time:uint64_t(0);
    state handle:system_t*(0);
    state next_schedule:uint64_t(-1);
    state storage_ctx:storage_ctx_handler_t*(0);
    state next_lba:uint64_t(0);

    reaction (startup) {=
    =}

    reaction (allocation_request) -> allocation_success, allocation_failure {=
    =}

    reaction(stg_request) -> schedule_tick, finished_request_crawling {=
    =}

    reaction(write_stg_request) -> schedule_tick, finished_request_crawling {=
    =}

    reaction(schedule_tick) -> schedule_tick, ssd_idle_trigger, finished_request_crawling {=
    =}

    reaction (finished_request_crawling) -> stg_response, write_stg_response {=
    =}

    reaction (print_stats) {=
    =}
}